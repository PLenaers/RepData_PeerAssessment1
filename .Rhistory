class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
cls_vect
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
flag_shapes
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
lapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
swirl()
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flagsâ‚¬landmass)
table(flags$landmass)
table(flags$animate)
table(flags$animate,flags$landmass,mean)
table(flags$animate,flags$landmass, mean)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
exit
quit
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11_17]
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnotm
?rnorm
rnorm(10)
rnorm(10,mean(100),sd=25)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,10)
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
d1
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
as.POSIClt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-c("October 17,1986 08:24")
t3<-c("October 17, 1986 08:24")
t3<-"October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time>t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
library(datasets)
data(iris)
?iris
sapply(iris,mean)
iris
sapply(iris[101:150,],mean)
lapply(iris[101:150,],mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
colMeans(iris)
apply(iris,2,mean)
data(mtcars)
?mtcars
split(mtcars,mtcars$cyl)
tapply(mtcars$cyl,mtcars$mpg,mean)
tapply(mtcars,mean)
lapply(mtcars,mean)
sapply(splt(mtcars$mpg,mtcars$cyl),mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
sapply(split(mtcars$hp,mtcars$cyl),mean)
209.21429-82.63636
debug(ls)
ls
split(mtcars$mpg,mtcars$cyl)
tapply(iris,Species,mean)
tapply(iris,"Species",mean)
tapply(iris,iris[,6],mean)
?iris
data(iris)
?iris
exit
0
quit
5+6
irir[,6]
iris[,6]
iris[,5]
tapply(iris,iris[,5],mean)
f<-g1(3,50)
f<-gl(3,50)
tapply(iris,f,mean)
q
q
undebug(ls)
?debug
q
q
undebug()
undebug(ls)
5+6
f<-gl(3,50)
library(datasets)
data(iris)
tapply(iris,iris[,5],mean)
f<-gl(3,50)
f
tapply(iris,f,mean)
tapply(iris[,1],iris[,5],mean)
iris[,1]
iria
iris
tapply(iris[,1],f,mean)
tapply(iris[,1],split(iris,iris$Species),mean)
split(iris,f)
split(iris,Species)
split(iris,iris[,5])
s<-split(iris,iris$Species)
sapply(iris,s,mean)
lapply(iris,s,mean)
lapply(s,mean)
lapply(s,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
sapply(s,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
sapply(s,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")]))
tapply(iris,iris$Species,mean)
tapply?
?tapply
tapply(iris$Species,iris,mean)
tapply(iris$Species,iris$Petal.Length,mean)
tapply(iris$Petal.Length,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
devug(ls)
debug(ls)
ls
ls()
5+4
library(datasets)
data(iris)
tapply(iris$Sepal.Length,iris$Species,ean)
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
set.seed(1)
rpois(5,2)
library(datasets)
Rprof()
fit <- lm(y~x1+x2)
?inverse
data(iris)
plot(iris$Petal.Length, iris$Petal.Width, type="n")
points(iris$Petal.Length, iris$Petal.Width, pch=19, col=iris$Species)
swirl()
library(swirl)
swirl()
library(tidyr)
students
bye()
swirl()
?Devices
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?splom
?par
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
gplot(Wind, Ozone, data = airquality)
library(ggplot)
library(ggplot2)
library(gplot)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
gplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
install.packages(c("boot", "class", "cluster", "codetools", "dplyr", "foreign", "KernSmooth", "lattice", "manipulate", "MASS", "Matrix", "nlme", "nnet", "Rcpp", "RMySQL", "rpart", "spatial", "survival"))
setwd("~/Google Drive/Work/Coursera/Data Science/05 - Reproducible Research/Project 1")
read.csv?
?read.csv
?read.csv
data <- read.csv("activity.csv")
setwd("~/Google Drive/Work/Coursera/Data Science/05 - Reproducible Research/Project 1")
data <- read.csv("activity.csv")
str(data)
head(data)
ddply(data, "date", numcolwise(sum))
library(plyr)
ddply(data, "date", numcolwise(sum))
?ddply
?sum
?ddply
ddply(data, "date", summarise, sumSteps = sum(steps))
sumSteps <- ddply(data, "date", summarise, sumSteps = sum(steps))
?sum
sumSteps <- ddply(data, "date", summarise, sumSteps = sum(steps, na.rm = TRUE))
sumSteos
sumSteps
hist(sumSteps)
str(sumSteps)
hist.POSIXt(sumSteps)
hist(sumSteps$sumSteps()
hist(sumSteps$sumSteps
hist(sumSteps$sumSteps)
hist(sumSteps$sumSteps, col='grey')
hist(sumSteps$sumSteps, col='blue')
?hist
hist(sumSteps$sumSteps, col='blue', xlab='Number of steps')
?hist
hist(sumSteps$sumSteps, col='blue', breaks = 8, xlab='Number of steps')
hist(sumSteps$sumSteps, col='blue', breaks = 8, xlab='Number of steps', title='Histogram of the number of steps')
hist(sumSteps$sumSteps, col='blue', xlab='Number of steps')
?hist
hist(sumSteps$sumSteps, breaks=8, col='lightblue', xlab='Number of steps')
hist(sumSteps$sumSteps, breaks=10, col='lightblue', xlab='Number of steps')
hist(sumSteps$sumSteps, breaks7, col='lightblue', xlab='Number of steps')
hist(sumSteps$sumSteps, breaks=7, col='lightblue', xlab='Number of steps')
hist(sumSteps$sumSteps, breaks=20, col='lightblue', xlab='Number of steps')
hist(sumSteps$sumSteps, breaks=15, col='lightblue', xlab='Number of steps')
hist(sumSteps$sumSteps, breaks=10, col='lightblue', xlab='Number of steps')
?hist
hist(sumSteps$sumSteps, breaks=10, col='lightblue', main='Historgam of the number of steps', xlab='Number of steps')
mean(sumSteps$sumSteps)
summary(sumSteps$sumSteps)
head(data)
str(data)
weekdays(data$date)
weekdays(as.date(data$date))
weekdays(as.Date(data$date))
data$day <- weekdays(as.Date(data$date))
str(data)
data$day <- as.Factor(weekdays(as.Date(data$date)))
data$day <- factor(weekdays(as.Date(data$date)))
str(data)
?ddply
avgByDay <- ddply(data, .(day, interval), sum(steps, na.rm=TRUE))
avgByDay <- ddply(data, .(day, interval), sum(data$steps, na.rm=TRUE))
avgByDay <- ddply(data, .(day, interval), summarise, avgByDay = sum(steps, na.rm=TRUE))
avgByDay
plot(avgByDay$steps)
str(avgByDay)
str(avgByDay$avgByDay)
plot(avgByDay$avgByDay)
plot(avgByDay$avgByDay, type='l')
plot(avgByDay$avgByDay, type='l', xlab='Day', ylab='Number of steps')
axis(1, at=c(0,288,576,864,1152,1440,1728), labels=("Thu","Fri","Sat","Sun","Mon","Tue","Wed"))
axis(1, at=c(0,288,576,864,1152,1440,1728), labels=c("Thu","Fri","Sat","Sun","Mon","Tue","Wed"))
plot(avgByDay$avgByDay, type='l', xlab='Day', ylab='Number of steps', xaxt="n")
axis(1, at=c(0,288,576,864,1152,1440,1728), labels=c("Thu","Fri","Sat","Sun","Mon","Tue","Wed"))
head(avgByDay)
levels(avgByDay$day)
axis(1, at=c(0,288,576,864,1152,1440,1728), labels=levels(avgByDay$day))
avgByDay[280:290,]
data[280:290,]
data$day <- factor(data$day, levels= c("Sunday", "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
avgByDay <- ddply(data, .(day, interval), summarise, avgByDay = sum(steps, na.rm=TRUE))
?order
plot(avgByDay$avgByDay, type='l', xlab='', ylab='Number of steps', xaxt="n")
c(levels(avgByDay$day), "Sunday")
axis(1, at=c(0,288,576,864,1152,1440,1728,2016), labels=c(levels(avgByDay$day), "Sunday"))
?max
sumSteps <- ddply(data, "date", summarise, steps = sum(steps, na.rm=TRUE))
sumSteps
str(sumSteps)
range(sumSteps$steps)
?plot
max(avgByDay$steps)
str(avgByDay)
avgByDay <- ddply(data, .(day, interval), summarise, steps = sum(steps, na.rm=TRUE))
max(avgByDay$steps)
?max
which.max(avgByDay$steps)
avgByDay[which.max(avgByDay$steps),]
?is.na
sum(is.na(data$steps))
head(avgByDay)
avgByDay <- ddply(data, .(day, interval), summarise, steps = mean(steps, na.rm=TRUE))
invisible(avgByDay[order(data$day), ])
plot(avgByDay$steps, type='l', xlab='', ylab='Number of steps', xaxt="n")
axis(1, at=c(0,288,576,864,1152,1440,1728,2016), labels=c(levels(avgByDay$day), ""))
avgByDay[which.max(avgByDay$steps),]
is.na(avgByDay$steps)
is.na(data$steps)
str(data)
data[1,]
data$steps[1,]
data$steps[1]
str(avgByDay)
avgByDay$steps(avgByDay$day=="Monday", avgByDay$interval==0)
?subset
subset(avgByDay$steps, avgByDay$day=="Monday", avgByDay$interval==0))
subset(avgByDay$steps, avgByDay$day=="Monday", avgByDay$interval==0)
subset(avgByDay$steps, avgByDay$day=="Monday" && avgByDay$interval==0)
subset(avgByDay$steps, avgByDay$day=="Monday" && avgByDay$interval==600)
subset(avgByDay$steps, avgByDay$day=="Monday")
avgByDay$day=="Monday" && avgByDay$interval==600
avgByDay$day=="Monday" && avgByDay$interval==0
?which
which(avgByDay$steps, avgByDay$day=="Monday" && avgByDay$interval==0)
which(avgByDay$day=="Monday" && avgByDay$interval==0)
which(avgByDay$day=="Monday" && avgByDay$interval==5)
which(avgByDay$day=="Monday")
which(avgByDay$day=="Monday" & avgByDay$interval==5)
avgByDay$steps[which(avgByDay$day=="Monday" & avgByDay$interval==5)]
is.na(data$steps)
data[9805,]
data[9995,]
avgByDay$steps[which(avgByDay$day=="Sunday" & avgByDay$interval==1650)]
data$steps[is.na(data$steps),]
data$steps[is.na(data$steps)]
idx <- is.na(data$steps)
str(data)
data$steps[idx] <- avgByDay$steps[which(avgByDay$day==data$day[idx] & avgByDay$interval==data$interval[idx])]
idx2 = c(1000, 6000, 10000)
data$steps[idx2]
data$day[idx2]
data$intervl[idx2]
data$interval[idx2]
which(avgByDay$day==data$day[idx] & avgByDay$interval==data$interval[idx])
which(avgByDay$day==data$day[6000] & avgByDay$interval==data$interval[6000])
data$day[idx2]
data$interval[idx2]
avgByDay[240,]
which(avgByDay$day==data$day[10000] & avgByDay$interval==data$interval[10000])
avgByDay[208,]
avgByDay[c(240,208),]
for (i in idx) {}
for (i in idx) {i}
i
i = 0;
for (i in idx) {i}
for (i in length(idx)) {i}
which(avgByDay$day==data$day[c(6000,10000)] & avgByDay$interval==data$interval[c(6000,10000)])
for (i in length(idx)) {idx[i]}
for (i in length(idx)) {a[i] <- i}
subset(avgByDay$day==data$day[idx2] & avgByDay$interval==data$interval[idx2])
subset(avgByDay$steps, avgByDay$day==data$day[idx2] & avgByDay$interval==data$interval[idx2])
source('~/Google Drive/Work/Coursera/Data Science/05 - Reproducible Research/Project 1/test.R')
source('~/Google Drive/Work/Coursera/Data Science/05 - Reproducible Research/Project 1/test.R')
data$steps
data$steps[1]
data$steps[10000]
modData <- data
for (i in i:length(idx)) {
if (idx[i]) {
modDdata$steps[i] <- avgByDay$steps[which(avgByDay$day==data$day[i] & avgByDay$interval==data$interval[i])]
}
}
for (i in i:length(idx)) {
if (idx[i]) {
modData$steps[i] <- avgByDay$steps[which(avgByDay$day==data$day[i] & avgByDay$interval==data$interval[i])]
}
}
modData$steps
sum(is.na(modData$steps))
avgByDayMod <- ddply(modData, .(day, interval), summarise, steps = mean(steps, na.rm=TRUE))
invisible(avgByDayMod[order(data$day), ])
plot(avgByDayMod$steps, type='l', xlab='', ylab='Number of steps', xaxt="n")
axis(1, at=c(0,288,576,864,1152,1440,1728,2016), labels=c(levels(avgByDayMod$day), ""))
summary(avgBrDayMod$steps)
summary(avgByDayMod$steps)
summary(sumSteps$steps)
hist(avgByDayMod$steps, breaks=10, col='lightblue', main='Histogram of the number of steps', xlim=c(0,25000), xlab='Number of steps')
hist(modData$steps, breaks=10, col='lightblue', main='Histogram of the number of steps', xlim=c(0,25000), xlab='Number of steps')
str(modData)
head(modData)
sumStepsMod <- ddply(modData, "date", summarise, steps = sum(steps, na.rm=TRUE))
sumStepsMod
hist(sumStepsMod$steps, breaks=10, col='lightblue', main='Histogram of the number of steps', xlim=c(0,25000), xlab='Number of steps')
summary(sumStepsMod$steps)
summary(sumSteps$steps)
data
summary(sumSteps$steps)
sumSteps
summary(sumSteps$steps)
summary(sumStepsMod$steps)
modData$weekend <- modData$day %in% c("Saturday", "Sunday")
str(modData)
modData$weekend <- factor(modData$day %in% c("Saturday", "Sunday"))
str(modData)
revalue(modData$weekend, c("FALSE"="weekday", "TRUE"="weekend"))
str(modData)
modData$weekend <- revalue(modData$weekend, c("FALSE"="weekday", "TRUE"="weekend"))
str(modData)
qplot(interval, steps, data=modData, facets=weekend~.)
library(qplot2)
library(qplot)
library(ggplot2)
qplot(interval, steps, data=modData, facets=weekend~.)
avgByInt <- ddply(data, .interval, summarise, steps = mean(steps, na.rm=TRUE))
avgByInt <- ddply(data, .(interval), summarise, steps = mean(steps, na.rm=TRUE))
qplot(interval, mean(steps), data=modData, facets=weekend~.)
avgByWeekend <- ddply(modData, .(weekend), summarise, steps = mean(steps))
avgByWeekend
avgByWeekend <- ddply(modData, .(weekend, interval), summarise, steps = mean(steps))
avgByWeekend
qplot(interval, steps, data=avgByWeekend, facets=weekend~.)
?qplot
qplot(interval, steps, data=avgByWeekend, facets=weekend~., geom="line")
qplot(interval, steps, data=avgByWeekend, facets=weekend~., geom="line", xlab="Interval", ylab="Number of steps")
